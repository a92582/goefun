package ecore

import (
	"strconv"
)

//到数值
//数值到大写
//数值到金额
//数值到格式文本
//取十六进制文本
//取八进制文本
//十六进制
//二进制

//调用格式： 〈文本型〉 数值到大写 （双精度小数型 欲转换形式的数值，逻辑型 是否转换为简体）
//将数值转换为简体或繁体的大写形式，返回转换后的文本。
//参数<1>的名称为“欲转换形式的数值”，类型为“双精度小数型（double）”。
//参数<2>的名称为“是否转换为简体”，类型为“逻辑型（bool）”，初始值为“假”。如果参数值为假，则转换为繁体。
//

//
//调用格式： 〈文本型〉 数值到金额 （双精度小数型 欲转换形式的数值，逻辑型 是否转换为简体）
//将数值转换为金额的简体或繁体大写形式，返回转换后的文本。
//参数<1>的名称为“欲转换形式的数值”，类型为“双精度小数型（double）”。
//参数<2>的名称为“是否转换为简体”，类型为“逻辑型（bool）”，初始值为“假”。如果参数值为假，则转换为繁体。
//

//调用格式： 〈文本型〉 数值到格式文本 （双精度小数型 欲转换为文本的数值，［整数型 小数保留位数］，逻辑型 是否进行千分位分隔）
//返回一个文本，代表指定数值被格式转换后的结果。
//参数<1>的名称为“欲转换为文本的数值”，类型为“双精度小数型（double）”。
//参数<2>的名称为“小数保留位数”，类型为“整数型（int）”，可以被省略。如果大于0，表示小数点右边应四舍五入保留的位数；如果等于0，表示舍入到整数；如果小于0，表示小数点左边舍入到的位置。例如：数值到格式文本 (1056.65, 1, 假) 返回 “1056.7”； 数值到格式文本 (1056.65, 0, 假) 返回 “1057”； 数值到格式文本 (1056.65, -1, 假) 返回 “1060”。如果省略本参数，则默认为保留所有实际存在的小数位。
//参数<3>的名称为“是否进行千分位分隔”，类型为“逻辑型（bool）”，初始值为“假”。如果参数值为真，数值文本的每个千分位上都将被自动插入一个逗号进行分隔。
//

// 取十六进制文本 返回一个字符串，代表指定数值的十六进制形式。
//
// 调用格式：
//
//	v := 取十六进制文本(n)
//
// 参数：
//
//	n 整数型 - 欲取进制文本的数值
//
// 返回值：
//
//	字符串类型 - 整数n的十六进制形式
func E取十六进制文本(n int) string {
	return strconv.FormatInt(int64(n), 16)
}

// E取八进制文本 返回一个字符串，代表指定数值的八进制形式。
//
// 调用格式：
//
//	v := 取八进制文本(n)
//
// 参数：
//
//	n 整数型 - 欲取进制文本的数值
//
// 返回值：
//
//	字符串类型 - 整数n的八进制形式
func E取八进制文本(n int) string {
	return strconv.FormatInt(int64(n), 8)
}

// E十六进制 转整数返回一个整数，代表指定十六进制文本常量对应的整数值。
// 本命令在编译时被直接预处理为整数型参量值，不影响程序执行效率。
//
// 调用格式：
//
//	v := 十六进制("0x1234")
//
// 参数：
//
//	s 文本型 - 十六进制文本常量
//
// 返回值：
//
//	整数型 - 十六进制文本常量对应的整数值
func E十六进制(s string) int {
	n, _ := strconv.ParseInt(s, 0, 0)
	return int(n)
}

// E二进制 转整数返回一个整数，代表指定二进制文本常量对应的整数值。
// 本命令在编译时被直接预处理为整数型参量值，不影响程序执行效率。
//
// 调用格式：
//
//	v := 二进制("1010")
//
// 参数：
//
//	s 文本型 - 二进制文本常量
//
// 返回值：
//
//	整数型 - 二进制文本常量对应的整数值
func E二进制(s string) int {
	n, _ := strconv.ParseInt(s, 2, 0)
	return int(n)
}
